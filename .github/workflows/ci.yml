name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # 文档构建测试
  docs-build:
    name: Documentation Build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install documentation dependencies
      run: |
        pip install mkdocs mkdocs-material mkdocs-mermaid2-plugin
    
    - name: Build documentation
      run: |
        mkdocs build --strict
      continue-on-error: true
    
    - name: Test documentation links
      run: |
        pip install linkchecker
        linkchecker site/
      continue-on-error: true

  # 代码质量检查
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Docker构建测试
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: byenatos:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker run --rm byenatos:test --version
      continue-on-error: true

  # 基础测试
  basic-tests:
    name: Basic Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Check Python syntax
      run: |
        find . -name "*.py" -exec python -m py_compile {} \;
    
    - name: Check shell scripts
      run: |
        find . -name "*.sh" -exec shellcheck {} \;
      continue-on-error: true
    
    - name: Check markdown files
      run: |
        pip install markdown-link-check
        find . -name "*.md" -exec markdown-link-check {} \;
      continue-on-error: true

  # 发布检查 (仅在main分支)
  release-check:
    name: Release Check
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [docs-build, code-quality, docker-build, basic-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check if release needed
      id: release-check
      run: |
        if git diff --name-only HEAD^ HEAD | grep -E "(CHANGELOG|VERSION|package\.json|Cargo\.toml)"; then
          echo "release=true" >> $GITHUB_OUTPUT
        fi
    
    - name: Create release draft
      if: steps.release-check.outputs.release == 'true'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.sha }}
        release_name: Release ${{ github.sha }}
        draft: true
        prerelease: false