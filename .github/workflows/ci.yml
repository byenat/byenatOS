name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Rust代码测试和检查
  rust-tests:
    name: Rust Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, beta]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        profile: minimal
        override: true
        components: rustfmt, clippy
    
    - name: Cache Cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Check code formatting
      run: cargo fmt --all -- --check
      working-directory: ./VirtualCore
    
    - name: Run Clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
      working-directory: ./VirtualCore
    
    - name: Run tests
      run: cargo test --verbose
      working-directory: ./VirtualCore
    
    - name: Run benchmarks
      run: cargo bench --no-run
      working-directory: ./VirtualCore

  # Python代码测试和检查
  python-tests:
    name: Python Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r LocalAIProcessor/requirements.txt
        pip install -r LocalAIProcessor/requirements-dev.txt
    
    - name: Run black code formatting check
      run: black --check --diff LocalAIProcessor/
    
    - name: Run isort import sorting check
      run: isort --check-only --diff LocalAIProcessor/
    
    - name: Run flake8 linting
      run: flake8 LocalAIProcessor/
    
    - name: Run mypy type checking
      run: mypy LocalAIProcessor/
    
    - name: Run pytest
      run: |
        cd LocalAIProcessor
        pytest --cov=. --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./LocalAIProcessor/coverage.xml
        flags: python
        name: python-${{ matrix.python-version }}

  # JavaScript/TypeScript SDK测试
  javascript-tests:
    name: JavaScript/TypeScript Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: SDK/JavaScript/package-lock.json
    
    - name: Install dependencies
      run: npm ci
      working-directory: ./SDK/JavaScript
    
    - name: Run ESLint
      run: npm run lint
      working-directory: ./SDK/JavaScript
    
    - name: Run TypeScript compilation
      run: npm run build
      working-directory: ./SDK/JavaScript
    
    - name: Run tests
      run: npm test
      working-directory: ./SDK/JavaScript
    
    - name: Run integration tests
      run: npm run test:integration
      working-directory: ./SDK/JavaScript

  # 安全性扫描
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Rust security audit
      uses: actions-rs/audit-check@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python for safety check
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install safety
      run: pip install safety
    
    - name: Run Python security check
      run: safety check -r LocalAIProcessor/requirements.txt
    
    - name: Run Bandit security linter
      run: |
        pip install bandit
        bandit -r LocalAIProcessor/ -x LocalAIProcessor/tests/

  # 文档构建测试
  docs-build:
    name: Documentation Build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install documentation dependencies
      run: |
        pip install mkdocs mkdocs-material mkdocs-mermaid2-plugin
    
    - name: Build documentation
      run: |
        mkdocs build --strict
    
    - name: Test documentation links
      run: |
        pip install linkchecker
        linkchecker site/

  # 集成测试
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [rust-tests, python-tests]
    
    services:
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: byenatos_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up test environment
      run: |
        ./Tools/DevEnvironment/setup_test_env.sh
    
    - name: Run integration tests
      run: |
        ./Scripts/run_integration_tests.sh
      env:
        REDIS_URL: redis://localhost:6379
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/byenatos_test

  # 性能测试
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up performance test environment
      run: |
        ./Tools/Performance/setup_perf_env.sh
    
    - name: Run performance benchmarks
      run: |
        ./Scripts/run_performance_tests.sh
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: performance-results/

  # Docker构建测试
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: byenatos:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker run --rm byenatos:test --version

  # 代码质量检查
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # 发布检查 (仅在main分支)
  release-check:
    name: Release Check
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [rust-tests, python-tests, javascript-tests, integration-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check if release needed
      id: release-check
      run: |
        if git diff --name-only HEAD^ HEAD | grep -E "(CHANGELOG|VERSION|package\.json|Cargo\.toml)"; then
          echo "release=true" >> $GITHUB_OUTPUT
        fi
    
    - name: Create release draft
      if: steps.release-check.outputs.release == 'true'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.sha }}
        release_name: Release ${{ github.sha }}
        draft: true
        prerelease: false